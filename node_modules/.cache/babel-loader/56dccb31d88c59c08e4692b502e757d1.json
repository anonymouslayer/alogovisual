{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\project\\\\Algorithm-Visualizer\\\\src\\\\components\\\\Pathfinding\\\\Pathfinding.js\";\nimport React, { Component } from \"react\";\nimport \"../../styles/Pathfinding.css\";\nimport Node from \"./Node\";\nimport PriorityQueue from \"js-priority-queue\";\nimport Dijkstra from \"./algorithms/Dijkstra\";\nimport Instruct from \"../Instructions/Instruct\";\nimport instruct_gif from \"../../assets/pathfinder.gif\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction node(row, col, dis) {\n  return {\n    row,\n    col,\n    dis\n  };\n}\n\nclass Pathfinding extends Component {\n  constructor() {\n    super();\n\n    this.makeGrid = () => {\n      if (this.animating) return;\n      let row_size = Math.floor((window.innerHeight - 60) / 27);\n      let col_size = Math.floor(window.innerWidth / 27);\n      let arr = [];\n\n      for (let i = 0; i < row_size; i++) {\n        let row = [];\n\n        for (let j = 0; j < col_size; j++) {\n          row.push({\n            value: 1,\n            row: i,\n            col: j,\n            isVisited: false,\n            isShortestPath: false,\n            isWall: false,\n            isShortestPath: false\n          });\n\n          try {\n            document.getElementById(`node-${i}-${j}`).className = \"node_\";\n          } catch {}\n        }\n\n        arr.push(row);\n      }\n\n      let start_x = Math.floor(Math.random() * row_size);\n      let start_y = Math.floor(Math.random() * col_size);\n      let end_x = Math.floor(Math.random() * row_size);\n      let end_y = Math.floor(Math.random() * col_size);\n      arr[start_x][start_y].isStart = true;\n      arr[end_x][end_y].isEnd = true;\n      this.setState({\n        grid: arr,\n        start_node: [start_x, start_y],\n        end_node: [end_x, end_y],\n        number_of_nodes: arr.length * arr[0].length,\n        visited: 0,\n        shortestPath: 0\n      });\n    };\n\n    this.handleMouseDown = (row, col) => {\n      if (this.animating) return;\n      let arr = this.state.grid;\n\n      if (arr[row][col].isStart) {\n        this.setState({\n          mainClicked: \"start\"\n        });\n      } else if (arr[row][col].isEnd) {\n        this.setState({\n          mainClicked: \"end\"\n        });\n      }\n\n      if (!arr[row][col].isWall && !arr[row][col].isStart && !arr[row][col].isEnd) arr[row][col].isWall = true;else if (arr[row][col].isWall) {\n        arr[row][col].isWall = false;\n      }\n      this.setState({\n        grid: arr,\n        mouseClicked: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (this.animating) return;\n\n      if (this.state.mouseClicked) {\n        let arr = this.state.grid;\n\n        if (this.state.mainClicked == \"start\") {\n          arr[row][col].isStart = true;\n          this.setState({\n            start_node: [row, col]\n          });\n        } else if (this.state.mainClicked == \"end\") {\n          arr[row][col].isEnd = true;\n          this.setState({\n            end_node: [row, col]\n          });\n        } else if (!arr[row][col].isWall && !arr[row][col].isStart && !arr[row][col].isEnd) arr[row][col].isWall = true;else if (arr[row][col].isWall) {\n          arr[row][col].isWall = false;\n        }\n\n        this.setState({\n          grid: arr,\n          mouseClicked: true\n        });\n      }\n    };\n\n    this.handleMouseLeave = (row, col) => {\n      if (this.animating) return;\n      let arr = this.state.grid;\n\n      if (this.state.mainClicked != \"\") {\n        arr[row][col].isStart = 0;\n        arr[row][col].isEnd = 0;\n        this.setState({\n          grid: arr\n        });\n      }\n    };\n\n    this.handleMouseUp = () => {\n      if (this.animating) return;\n      this.setState({\n        mouseClicked: false,\n        mainClicked: \"\"\n      });\n    };\n\n    this.isInsideGrid = (i, j) => {\n      return i >= 0 && i < this.state.grid.length && j >= 0 && j < this.state.grid[0].length;\n    };\n\n    this.dijkshtra = e => {\n      e.preventDefault();\n      if (this.animating) return;\n      let arr = this.state.grid;\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[0].length; j++) {\n          if (document.getElementById(`node-${i}-${j}`).className == \"node_path\") document.getElementById(`node-${i}-${j}`).className = \"node_\";\n\n          if (document.getElementById(`node-${i}-${j}`).className == \"node_visited\") {\n            document.getElementById(`node-${i}-${j}`).className = \"node_\";\n          }\n        }\n      }\n\n      let {\n        visited_nodes,\n        shortestPath\n      } = Dijkstra(this.state.grid, this.state.start_node, this.state.end_node);\n\n      const animate = async () => {\n        let i = 0;\n        let j = 0;\n        this.animating = true;\n\n        const animateVisited = () => {\n          if (i == visited_nodes.length) {\n            requestAnimationFrame(animatePath);\n            return;\n          }\n\n          arr[visited_nodes[i].row][visited_nodes[i].col].isVisited = true; // this.setState({\n          //     grid:arr\n          // })\n\n          if (!arr[visited_nodes[i].row][visited_nodes[i].col].isStart && !arr[visited_nodes[i].row][visited_nodes[i].col].isEnd) document.getElementById(`node-${visited_nodes[i].row}-${visited_nodes[i].col}`).className = \"node_visited\";\n          ++i;\n          requestAnimationFrame(animateVisited); // setTimeout(() => {\n          //   }, 1000 / 1000);\n        };\n\n        const animatePath = () => {\n          if (j == shortestPath.length) {\n            this.setState({\n              grid: arr,\n              visited: visited_nodes.length,\n              shortestPath: shortestPath.length\n            });\n            this.animating = false;\n            return;\n          }\n\n          arr[shortestPath[j].row][shortestPath[j].col].isShortestPath = true;\n          if (!arr[shortestPath[j].row][shortestPath[j].col].isStart && !arr[shortestPath[j].row][shortestPath[j].col].isEnd) document.getElementById(`node-${shortestPath[j].row}-${shortestPath[j].col}`).className = \"node_path\";\n          ++j;\n          requestAnimationFrame(animatePath);\n        };\n\n        await requestAnimationFrame(animateVisited);\n      };\n\n      animate().then(() => {});\n    };\n\n    this.toggleChat = () => {\n      var chatBody = document.getElementById(\"info-body\");\n\n      if (chatBody.style.display == 'none') {\n        chatBody.style.display = 'block';\n        return;\n      } else {\n        chatBody.style.display = 'none';\n        return;\n      }\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.state = {\n      method: \"Algorithms\",\n      grid: [],\n      mouseClicked: false,\n      mainClicked: \"\",\n      start_node: null,\n      end_node: null,\n      visited: 0,\n      shortestPath: 0,\n      number_of_nodes: 0,\n      algo_info: {\n        \"Algorithms\": {\n          text: \"\",\n          url: \"\"\n        },\n        \"Dijkstra's Algorithm\": {\n          text: \"Dijkstra’s algorithm is very similar to Prim’s algorithm for minimum spanning tree. Like Prim’s MST, we generate a SPT (shortest path tree) with given source as root. We maintain two sets, one set contains vertices included in shortest path tree, other set includes vertices not yet included in shortest path tree. At every step of the algorithm, we find a vertex which is in the other set (set of not yet included) and has a minimum distance from the source.\",\n          url: \"https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/\"\n        },\n        \"A* Search\": {\n          text: \"Informally speaking, A* Search algorithms, unlike other traversal techniques, it has “brains”. What it means is that it is really a smart algorithm which separates it from the other conventional algorithms. This fact is cleared in detail in below sections. And it is also worth mentioning that many games and web-based maps use this algorithm to find the shortest path very efficiently (approximation).\",\n          url: \"https://www.geeksforgeeks.org/a-search-algorithm/\"\n        },\n        \"Breadth First Search\": {\n          text: \"In Progress\",\n          url: \"https://www.geeksforgeeks.org/a-search-algorithm/\"\n        }\n      },\n      showModal: true\n    };\n    this.animating = false;\n  }\n\n  componentDidMount() {\n    this.makeGrid();\n    window.addEventListener(\"resize\", e => {\n      this.makeGrid();\n    });\n  }\n\n  componentDidUpdate() {\n    let method = this.state.method;\n\n    if (method != \"Algorithms\") {\n      document.getElementById(\"info-btn\").style.display = \"block\";\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Instruct, {\n      show: this.state.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }\n    }, \"How to use?\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"card-img-top img-thumbnail\",\n      style: {\n        marginBottom: \"5px\"\n      },\n      src: instruct_gif,\n      alt: \"Card image cap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-success my-2 my-sm-0\",\n      type: \"submit\",\n      onClick: this.hideModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }, \"Close\")), /*#__PURE__*/React.createElement(\"nav\", {\n      class: \"navbar navbar-expand-lg navbar-light bg-light\",\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"navbar-brand\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }\n    }, \"Pathfinding Visualizer\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"navbar-toggler\",\n      type: \"button\",\n      \"data-toggle\": \"collapse\",\n      \"data-target\": \"#navbarSupportedContent\",\n      \"aria-controls\": \"navbarSupportedContent\",\n      \"aria-expanded\": \"false\",\n      \"aria-label\": \"Toggle navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"navbar-toggler-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"collapse navbar-collapse\",\n      id: \"navbarSupportedContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"navbar-nav mr-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      exact: true,\n      to: \"/\",\n      className: \"nav-link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 25\n      }\n    }, \"Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"nav-link dropdown-toggle\",\n      href: \"#\",\n      id: \"navbarDropdown\",\n      role: \"button\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 29\n      }\n    }, this.state.method), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown-menu\",\n      \"aria-labelledby\": \"navbarDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"dropdown-item\",\n      href: \"#\",\n      onClick: () => this.setState({\n        method: \"Dijkstra's Algorithm\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 33\n      }\n    }, \"Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"a\", {\n      class: \"dropdown-item\",\n      href: \"#\",\n      onClick: () => this.setState({\n        method: \"A* Search\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 33\n      }\n    }, \"A* Search\"))), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"nav-link\",\n      href: \"#\",\n      onClick: () => this.makeGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 25\n      }\n    }, \"Clear \", /*#__PURE__*/React.createElement(\"span\", {\n      class: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 90\n      }\n    }, \"(current)\"))), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link\",\n      href: \"#\",\n      onClick: this.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 25\n      }\n    }, \"Instructions \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 96\n      }\n    }, \"(current)\"))), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      style: {\n        marginLeft: \"10px\",\n        minWidth: \"120px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"progress-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 58\n      }\n    }, \"Visited Nodes\"), /*#__PURE__*/React.createElement(\"span\", {\n      class: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 29\n      }\n    }, this.state.visited)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"progress2 progress-moved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"progress-bar2\",\n      style: {\n        width: `${this.state.visited / this.state.number_of_nodes * 100}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      style: {\n        marginLeft: \"10px\",\n        minWidth: \"120px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"progress-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 58\n      }\n    }, \"Shortest Path\"), /*#__PURE__*/React.createElement(\"span\", {\n      class: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 29\n      }\n    }, this.state.shortestPath)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"progress2 progress-moved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"progress-bar2\",\n      style: {\n        width: `${this.state.shortestPath / this.state.number_of_nodes * 100}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"error\",\n      class: \"alert alert-danger\",\n      style: {\n        marginLeft: \"10px\",\n        display: \"none\"\n      },\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 25\n      }\n    }, \"Select an algorithm first!\")), /*#__PURE__*/React.createElement(\"form\", {\n      class: \"form-inline my-2 my-lg-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-outline-success my-2 my-sm-0\",\n      type: \"submit\",\n      onClick: this.dijkshtra,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }, \"Find Path\")))), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }\n    }, this.state.grid.map((row, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        style: {\n          display: \"table-row\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 33\n        }\n      }, row.map((element, i) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          value: element,\n          isWall: element.isWall,\n          isStart: element.isStart,\n          isEnd: element.isEnd,\n          isVisited: element.isVisited,\n          isShortestPath: element.isShortestPath,\n          key: i,\n          row: index,\n          col: i,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          onMouseLeave: (row, col) => this.handleMouseLeave(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 49\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"chat-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"info-btn\",\n      class: \"chat-btn\",\n      onClick: this.toggleChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }\n    }, \"\\u2139\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"info-body\",\n      class: \"chat-body\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card bg-dark\",\n      style: {\n        maxWidth: \"18rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card-body \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      class: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 29\n      }\n    }, this.state.method), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"card-text\",\n      style: {\n        maxHeight: \"50vh\",\n        overflow: \"auto\",\n        overflowX: \"hidden\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 25\n      }\n    }, this.state.algo_info[this.state.method].text), /*#__PURE__*/React.createElement(\"a\", {\n      href: this.state.algo_info[this.state.method].url,\n      target: \"_blank\",\n      class: \"card-link\",\n      style: {\n        color: \"#57A846\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 29\n      }\n    }, \"More Info\"))))));\n  }\n\n}\n\nexport default Pathfinding;","map":{"version":3,"sources":["C:/Users/hp/Desktop/project/Algorithm-Visualizer/src/components/Pathfinding/Pathfinding.js"],"names":["React","Component","Node","PriorityQueue","Dijkstra","Instruct","instruct_gif","NavLink","node","row","col","dis","Pathfinding","constructor","makeGrid","animating","row_size","Math","floor","window","innerHeight","col_size","innerWidth","arr","i","j","push","value","isVisited","isShortestPath","isWall","document","getElementById","className","start_x","random","start_y","end_x","end_y","isStart","isEnd","setState","grid","start_node","end_node","number_of_nodes","length","visited","shortestPath","handleMouseDown","state","mainClicked","mouseClicked","handleMouseEnter","handleMouseLeave","handleMouseUp","isInsideGrid","dijkshtra","e","preventDefault","visited_nodes","animate","animateVisited","requestAnimationFrame","animatePath","then","toggleChat","chatBody","style","display","showModal","hideModal","method","algo_info","text","url","componentDidMount","addEventListener","componentDidUpdate","render","marginBottom","color","marginLeft","minWidth","width","map","index","element","maxWidth","maxHeight","overflow","overflowX"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../../styles/Pathfinding.css\";\r\nimport Node from \"./Node\";\r\nimport PriorityQueue from \"js-priority-queue\";\r\nimport Dijkstra from \"./algorithms/Dijkstra\";\r\nimport Instruct from \"../Instructions/Instruct\";\r\nimport instruct_gif from \"../../assets/pathfinder.gif\";\r\nimport { NavLink } from \"react-router-dom\";\r\nfunction node(row,col,dis){\r\n    return({\r\n        row,\r\n        col,\r\n        dis\r\n    })\r\n}\r\n\r\nclass Pathfinding extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            method:\"Algorithms\",\r\n            grid:[],\r\n            mouseClicked:false,\r\n            mainClicked:\"\",\r\n            start_node:null,\r\n            end_node:null,\r\n            visited:0,\r\n            shortestPath:0,\r\n            number_of_nodes:0,\r\n            algo_info:{\r\n                \"Algorithms\":{\r\n                    text:\"\",\r\n                    url:\"\"\r\n                },\r\n                \"Dijkstra's Algorithm\":{\r\n                    text:\"Dijkstra’s algorithm is very similar to Prim’s algorithm for minimum spanning tree. Like Prim’s MST, we generate a SPT (shortest path tree) with given source as root. We maintain two sets, one set contains vertices included in shortest path tree, other set includes vertices not yet included in shortest path tree. At every step of the algorithm, we find a vertex which is in the other set (set of not yet included) and has a minimum distance from the source.\",\r\n                    url:\"https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/\"\r\n                },\r\n                \"A* Search\":{\r\n                    text:\"Informally speaking, A* Search algorithms, unlike other traversal techniques, it has “brains”. What it means is that it is really a smart algorithm which separates it from the other conventional algorithms. This fact is cleared in detail in below sections. And it is also worth mentioning that many games and web-based maps use this algorithm to find the shortest path very efficiently (approximation).\",\r\n                    url:\"https://www.geeksforgeeks.org/a-search-algorithm/\"\r\n                },\r\n                \"Breadth First Search\":{\r\n                    text:\"In Progress\",\r\n                    url:\"https://www.geeksforgeeks.org/a-search-algorithm/\"\r\n                }\r\n            },\r\n            showModal:true\r\n\r\n        }\r\n        this.animating=false;\r\n    }\r\n    \r\n    \r\n    makeGrid=()=>{\r\n        if(this.animating)return;\r\n        let row_size=Math.floor((window.innerHeight-60)/27);\r\n        let col_size=Math.floor((window.innerWidth)/27);\r\n        let arr=[]\r\n        for(let i=0;i<row_size;i++){\r\n            let row=[];\r\n            for(let j=0;j<col_size;j++){\r\n                row.push({\r\n                    value:1,\r\n                    row:i,\r\n                    col:j,\r\n                    isVisited:false,\r\n                    isShortestPath:false,\r\n                    isWall:false,\r\n                    isShortestPath:false\r\n                });\r\n                try{\r\n                document.getElementById(`node-${i}-${j}`).className=\"node_\";\r\n                }catch{\r\n                }\r\n\r\n            }\r\n            arr.push(row);\r\n        }\r\n        let start_x=Math.floor(Math.random()*row_size);\r\n        let start_y=Math.floor(Math.random()*col_size);\r\n        let end_x=Math.floor(Math.random()*row_size);\r\n        let end_y=Math.floor(Math.random()*col_size);\r\n        arr[start_x][start_y].isStart=true;\r\n        arr[end_x][end_y].isEnd=true;\r\n\r\n        this.setState({\r\n            grid:arr,\r\n            start_node:[start_x,start_y],\r\n            end_node:[end_x,end_y],\r\n            number_of_nodes:arr.length*arr[0].length,\r\n            visited:0,\r\n            shortestPath:0\r\n        })\r\n        \r\n    }\r\n    componentDidMount(){\r\n        this.makeGrid();\r\n        window.addEventListener(\"resize\",(e)=>{\r\n            this.makeGrid();\r\n        })\r\n    }\r\n    handleMouseDown=(row,col)=>{\r\n        if(this.animating)return;\r\n        let arr=this.state.grid;\r\n        if(arr[row][col].isStart){\r\n            this.setState({\r\n                mainClicked:\"start\"\r\n            })\r\n        }\r\n        else if(arr[row][col].isEnd){\r\n            this.setState({\r\n                mainClicked:\"end\"\r\n            })\r\n        }\r\n        if(!arr[row][col].isWall&&!arr[row][col].isStart&&!arr[row][col].isEnd)\r\n            arr[row][col].isWall=true;\r\n        else if(arr[row][col].isWall){\r\n            arr[row][col].isWall=false;\r\n        }\r\n        this.setState({\r\n            grid:arr,\r\n            mouseClicked:true\r\n        })\r\n    }\r\n    handleMouseEnter=(row,col)=>{\r\n        if(this.animating)return;\r\n        if(this.state.mouseClicked){\r\n            let arr=this.state.grid;\r\n            if(this.state.mainClicked==\"start\"){\r\n                arr[row][col].isStart=true;\r\n                this.setState({\r\n                    start_node:[row,col]\r\n                })\r\n            }\r\n            else if(this.state.mainClicked==\"end\"){\r\n                arr[row][col].isEnd=true;\r\n                this.setState({\r\n                    end_node:[row,col]\r\n                })\r\n            }\r\n            else if(!arr[row][col].isWall&&!arr[row][col].isStart&&!arr[row][col].isEnd)\r\n                arr[row][col].isWall=true;\r\n            else if(arr[row][col].isWall){\r\n                arr[row][col].isWall=false;\r\n            }\r\n            this.setState({\r\n                grid:arr,\r\n                mouseClicked:true\r\n            })\r\n        }\r\n        \r\n    }\r\n    handleMouseLeave=(row,col)=>{\r\n        if(this.animating)return;\r\n        let arr=this.state.grid;\r\n        if(this.state.mainClicked!=\"\"){\r\n            arr[row][col].isStart=0;\r\n            arr[row][col].isEnd=0;\r\n            this.setState({\r\n                grid:arr\r\n            })\r\n        }\r\n        \r\n    }\r\n    handleMouseUp=()=>{\r\n\r\n        if(this.animating)return;\r\n        this.setState({\r\n            mouseClicked:false,\r\n            mainClicked:\"\"\r\n        })\r\n    }\r\n    isInsideGrid=(i,j) =>\r\n    { \r\n        return (i >= 0 && i < this.state.grid.length && j >= 0 && j < this.state.grid[0].length); \r\n    }\r\n    dijkshtra=(e)=>{\r\n        e.preventDefault();\r\n        if(this.animating)return;\r\n        let arr=this.state.grid;\r\n        for(let i=0;i<arr.length;i++){\r\n            for(let j=0;j<arr[0].length;j++){\r\n                if(document.getElementById(`node-${i}-${j}`).className==\"node_path\")\r\n                    document.getElementById(`node-${i}-${j}`).className=\"node_\";\r\n                if(document.getElementById(`node-${i}-${j}`).className==\"node_visited\"){\r\n                    document.getElementById(`node-${i}-${j}`).className=\"node_\";\r\n                }\r\n            }\r\n        }\r\n        \r\n        let {visited_nodes,shortestPath}=Dijkstra(this.state.grid,this.state.start_node,this.state.end_node)\r\n        \r\n        const animate=async ()=>{\r\n            \r\n        let i=0;\r\n        let j=0;\r\n        this.animating=true;\r\n        const animateVisited=()=>{\r\n            if(i==visited_nodes.length){\r\n                requestAnimationFrame(animatePath);\r\n                return;\r\n            }\r\n            arr[visited_nodes[i].row][visited_nodes[i].col].isVisited=true;\r\n            // this.setState({\r\n            //     grid:arr\r\n            // })\r\n            if(!arr[visited_nodes[i].row][visited_nodes[i].col].isStart&&!arr[visited_nodes[i].row][visited_nodes[i].col].isEnd)\r\n            document.getElementById(`node-${visited_nodes[i].row}-${visited_nodes[i].col}`).className=\"node_visited\";\r\n            ++i;\r\n            requestAnimationFrame(animateVisited);\r\n            // setTimeout(() => {\r\n                \r\n            //   }, 1000 / 1000);\r\n        }\r\n        \r\n        const animatePath=()=>{\r\n            if(j==shortestPath.length){\r\n                this.setState({\r\n                    grid:arr,\r\n                    visited:visited_nodes.length,\r\n                    shortestPath:shortestPath.length\r\n                })\r\n                this.animating=false;\r\n                return;\r\n            }\r\n            arr[shortestPath[j].row][shortestPath[j].col].isShortestPath=true;\r\n            \r\n            if(!arr[shortestPath[j].row][shortestPath[j].col].isStart&&!arr[shortestPath[j].row][shortestPath[j].col].isEnd)\r\n            document.getElementById(`node-${shortestPath[j].row}-${shortestPath[j].col}`).className=\"node_path\";\r\n            ++j;\r\n            \r\n            requestAnimationFrame(animatePath);\r\n        }\r\n        await requestAnimationFrame(animateVisited);\r\n    }\r\n    animate().then(()=>{\r\n        \r\n    });\r\n    }\r\n    toggleChat=()=>{\r\n        var chatBody = document.getElementById(\"info-body\");\r\n        if(chatBody.style.display=='none') {\r\n            \r\n            chatBody.style.display = 'block';\r\n            return;\r\n        } else {\r\n            \r\n            chatBody.style.display = 'none';\r\n            return;\r\n        }\r\n    }\r\n    showModal = () => {\r\n        this.setState({ \r\n                showModal: true\r\n            });\r\n      };\r\n    \r\n    hideModal = () => {\r\n    this.setState({ showModal: false });\r\n    };\r\n    componentDidUpdate(){\r\n        let method=this.state.method\r\n        if(method!=\"Algorithms\"){\r\n            document.getElementById(\"info-btn\").style.display=\"block\";\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Instruct show={this.state.showModal}>\r\n                    <h3>How to use?</h3>\r\n                <img className=\"card-img-top img-thumbnail\" style={{marginBottom:\"5px\"}} src={instruct_gif} alt=\"Card image cap\"/>\r\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" onClick={this.hideModal}>Close</button>\r\n                </Instruct>\r\n                <nav class=\"navbar navbar-expand-lg navbar-light bg-light\" style={{color:\"white\"}}>\r\n                    <a class=\"navbar-brand\" href=\"#\">Pathfinding Visualizer</a>\r\n                    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span class=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul class=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                        <NavLink exact to=\"/\" className=\"nav-link\">Home</NavLink>\r\n                        </li>\r\n                        <li class=\"nav-item dropdown\">\r\n                            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            {this.state.method}\r\n                            </a>\r\n                            <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                <a class=\"dropdown-item\" href=\"#\" onClick={()=>this.setState({method:\"Dijkstra's Algorithm\"})}>Dijkstra's Algorithm</a>\r\n                                <a class=\"dropdown-item\" href=\"#\" onClick={()=>this.setState({method:\"A* Search\"})}>A* Search</a>\r\n                                {/* <a class=\"dropdown-item\" href=\"#\" onClick={()=>this.setState({method:\"Breath First Search\"})}>Breath First Search</a> */}\r\n                            </div>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\" onClick={()=>this.makeGrid()}>Clear <span class=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\" onClick={this.showModal}>Instructions <span className=\"sr-only\" >(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\" style={{marginLeft:\"10px\",minWidth:\"120px\"}}>\r\n                            <p className=\"progress-text\"><span className=\"span-text\">Visited Nodes</span>\r\n                            <span class=\"comment\">{this.state.visited}</span>\r\n                            </p>\r\n                            {/* <p class=\"card-text progress-text\">{this.state.shortestPath}</p> */}\r\n                            <div class=\"progress2 progress-moved\" >\r\n                            <div class=\"progress-bar2\" style={{width:`${(this.state.visited/this.state.number_of_nodes)*100}%`}}></div>\r\n                            </div>\r\n                        </li>\r\n                        <li className=\"nav-item\" style={{marginLeft:\"10px\",minWidth:\"120px\"}}>\r\n                            <p className=\"progress-text\"><span className=\"span-text\">Shortest Path</span>\r\n                            <span class=\"comment\">{this.state.shortestPath}</span></p>\r\n                            <div class=\"progress2 progress-moved\" >\r\n                                <div class=\"progress-bar2\" style={{width:`${(this.state.shortestPath/this.state.number_of_nodes)*100}%`}}></div>\r\n                            </div>\r\n                        </li>\r\n                        <div id=\"error\" class=\"alert alert-danger\" style={{marginLeft:\"10px\",display:\"none\"}} role=\"alert\">\r\n                            Select an algorithm first!\r\n                        </div>\r\n                        </ul>\r\n                        <form class=\"form-inline my-2 my-lg-0\">\r\n                        <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" onClick={this.dijkshtra}>Find Path</button>\r\n                        </form>\r\n                    </div>\r\n                    </nav>\r\n                    <table>\r\n                        {\r\n                        this.state.grid.map((row,index)=>{\r\n                            return(\r\n                                <tr style={{display:\"table-row\"}}>\r\n                                    {\r\n                                        row.map((element,i)=>{\r\n                                            return(\r\n                                                <Node \r\n                                                value={element}\r\n                                                isWall={element.isWall}\r\n                                                isStart={element.isStart}\r\n                                                isEnd={element.isEnd}\r\n                                                isVisited={element.isVisited}\r\n                                                isShortestPath={element.isShortestPath}\r\n                                                key={i}\r\n                                                row={index}\r\n                                                col={i}\r\n                                                onMouseDown={(row,col)=>this.handleMouseDown(row,col)}\r\n                                                onMouseEnter={(row,col)=>this.handleMouseEnter(row,col)}\r\n                                                onMouseUp={()=>this.handleMouseUp()}\r\n                                                onMouseLeave={(row,col)=>this.handleMouseLeave(row,col)}\r\n                                                />\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            )\r\n                        })\r\n                        }\r\n                    </table>\r\n                    <div class=\"chat-container\">\r\n                    <button id=\"info-btn\" class=\"chat-btn\" onClick={this.toggleChat}>ℹ</button>\r\n                    <div id=\"info-body\" class=\"chat-body\" style={{display:\"none\"}}>\r\n                    <div class=\"card bg-dark\" style={{maxWidth: \"18rem\"}}>\r\n                        <div class=\"card-body \">\r\n                            <h5 class=\"card-title\">{this.state.method}</h5>\r\n                        <p class=\"card-text\" style={{maxHeight:\"50vh\",overflow:\"auto\",overflowX:\"hidden\"}}>{this.state.algo_info[this.state.method].text}</p>\r\n                            <a href={this.state.algo_info[this.state.method].url} target=\"_blank\" class=\"card-link\" style={{color:\"#57A846\"}}>More Info</a>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pathfinding;"]},"metadata":{},"sourceType":"module"}